组合模式允许你将对象组合成树形结构来表现”部分-整体“的层次结构，使得客户以一致的方式处理单个对象以及对象的组合。

组合模式实现的最关键的地方是——简单对象和复合对象必须实现相同的接口。
这就是组合模式能够将组合对象和简单对象进行一致处理的原因。

组合模式中涉及到三个角色：

抽象构件（Component）角色：这是一个抽象角色，上面实现中Graphics充当这个角色，
它给参加组合的对象定义出了公共的接口及默认行为，可以用来管理所有的子对象（在透明式的组合模式是这样的）。
在安全式的组合模式里，构件角色并不定义出管理子对象的方法，这一定义由树枝结构对象给出。

树叶构件（Leaf）角色：树叶对象时没有下级子对象的对象，上面实现中Line和Circle充当这个角色，
定义出参加组合的原始对象的行为

树枝构件（Composite）角色：代表参加组合的有下级子对象的对象，
上面实现中ComplexGraphics充当这个角色，
树枝对象给出所有管理子对象的方法实现，如Add、Remove等。

优点：
组合模式使得客户端代码可以一致地处理对象和对象容器，无需关系处理的单个对象，还是组合的对象容器。
将”客户代码与复杂的对象容器结构“解耦。可以更容易地往组合对象中加入新的构件。

缺点：
使得设计更加复杂。客户端需要花更多时间理清类之间的层次关系。（这个是几乎所有设计模式所面临的问题）。