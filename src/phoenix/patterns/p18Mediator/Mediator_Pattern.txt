中介者模式，定义了一个中介对象来封装一系列对象之间的交互关系。
中介者使各个对象之间不需要显式地相互引用，从而使耦合性降低，而且可以独立地改变它们之间的交互行为。

从生活中例子自然知道，中介者模式设计两个具体对象，一个是用户类，另一个是中介者类。
根据针对接口编程原则，则需要把这两类角色进行抽象，所以中介者模式中就有了4类角色。
它们分别是：抽象中介者角色，具体中介者角色、抽象同事类和具体同事类。
中介者类是起到协调各个对象的作用，则抽象中介者角色中则需要保存各个对象的引用。

如果不使用中介者模式的话，每个对象之间过度耦合，这样的既不利于类的复用也不利于扩展。
如果引入了中介者模式，那么对象之间的关系将变成星型结构，任何一个类的变化，只会影响中介者和类本身，这样的设计大大减少了系统的耦合度。

一般在以下情况下可以考虑使用中介者模式：

一组定义良好的对象，现在要进行复杂的相互通信。
想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。

中介者模式具有以下几点优点：
1.简化了对象之间的关系，将系统的各个对象之间的相互关系进行封装，将各个同事类解耦，使得系统变为松耦合。
2.提供系统的灵活性，使得各个同事对象独立而易于复用。

中介者模式也存在对应的缺点：
1.中介者模式中，中介者角色承担了较多的责任，所以一旦这个中介者对象出现了问题，整个系统将会受到重大的影响。
例如，QQ游戏中计算欢乐豆的程序出错了，这样会造成重大的影响。
2.新增加一个同事类时，不得不去修改抽象中介者类和具体中介者类，此时可以使用观察者模式和状态模式来解决这个问题。